" this is marian eichholz hand tuned vim initialization.
" maintainer note: sh projects/sync-lib.sh
"
" This is meant to run with color scheme 'solarized' in a solarized terminal
" like xfce-terminal. GNOME-terminal has to be tuned manually.

" plugin list {{{
" ---------------
" pathogen
" c (aka c-support)
" cscope_maps (manual, needs cscope-feature of gvim)
" taglist (:TlistToggle)
" hardmode (:call hardmode())
" vim-rails, vim-rake
"
" self built
" ----------
" ruby
" }}}
" setup infrastructure {{{
lang C " external programs like compilers are called with standard locale

" with Windows, we have a static super-vimrc which sources this file:
if !exists("g:dotvim")
	let g:dotvim = $HOME . "/.vim/" " just THE default value(s)
endif

execute pathogen#infect()

" setup help system and include local tags
set tags+=./tags;/ " recursively up
exec ":helptags " . g:dotvim . "doc"
" include pathogenized help directories
exec ":Helptags"

let g:My_Leader = ","
let mapleader = g:My_Leader
let g:NERDTreeDirArrows = 0

" source our own moving commands
exec ":source " . g:dotvim . "moving.vim"
"}}}

" expand %% to full active file path. nice with ':edit'
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" HINT: for training the homerow skills: activate hard mode by default:
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode() " in moving.vim

" Map hotkeys {{{
set pastetoggle=<F12>
nnoremap <silent> <F5> :cclose<CR>:bnext<CR>
nnoremap <silent> <S-F5> :cclose<CR>:bprev<CR>
nnoremap <silent> <F6> :cnext<CR>
nnoremap <silent> <S-F6> :cprev<CR>
nnoremap <F2> :w!<CR> " save
inoremap <F2> <C-c>:w!<CR> " save
nnoremap <F4> :cclose<CR>  " close quickfix window
" }}}
" Map standard commands {{{
nnoremap <leader>pt :setl noai nocin nosi inde=<CR> " plain text
nnoremap <leader>ttn :NERDTreeToggle<CR> " Toggle the file browser
nnoremap <leader>ttl :TlistToggle<CR> " ich kann es mir sonst nicht merken
nnoremap <leader>th :call ToggleHardMode()<CR>      " toggle hard
nnoremap <leader>tn :set number!<CR>                " toggle numbers
nnoremap <leader>slv :call CVsourceLocalVim()<CR>
" }}}
" activate or (re)set all the cool VIM builtin stuff {{{
set printoptions=paper:a4,duplex:off
syntax on
filetype plugin on
filetype indent on
set nocompatible
set modeline
set number
set nrformats= 		" no octal, just decimal CTRL-X/A
set showcmd
set showmatch
set hlsearch
set incsearch
set background=dark	" works without theme!
set visualbell
set viminfo=            " do not leave trails and search patterns
set termencoding=utf-8  " seems as if everywhere is (now) UTF with the keys
set fileencodings=ucs-bom,utf-8,latin1 " heuristics precedence
set fileencoding&       " default: auto-sensing charset of current buffer
set encoding&           " default: terminal charset follows current locale
" }}}
" tune omnicompletion {{{
set completeopt+=longest,menuone
set omnifunc=syntaxcomplete#Complete
let g:UltiSnipsNoPythonWarning = 1

" CAVEAT: Overriding <Esc> to >C-e> causes "A" line inserts on movements
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
" }}}
" Customize UI {{{
if has('gui_running')
  set background=light
	colorscheme solarized " or: ir_black
	if has('gui_macvim')
					set guifont=Monaco:h13 " Menlo\ Regular:h14
	else
					set guifont=Monospace\ 11
					set guioptions-=T " remove toolbar
					" set guioptions-=m " remove menu bar
	end
	set columns=88 " with number
	set lines=55
	nnoremap ZZ :echo "ZZ disabled for GUI"<CR>
else " no GUI
	let g:solarized_termtrans=1
	" set background=light
	colorscheme solarized
endif " }}}
function! ME_IntelliTab() " smart TAB completion binding {{{
	if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
		return "\<Tab>"
	else
		return "\<C-N>"
	endif
endfunction
" too problematic as global: inoremap <Tab> <C-R>=ME_IntelliTab()<CR>
" }}}
inoremap <C-Tab> <C-X><C-O><C-p><C-n>
function! s:FixRubyPath() "{{{
	" override broken path setting by ftplugin
	" see: http://stackoverflow.com/questions/8755607/vim-option-value-contains-error-message-when-editing-ruby-files-gem-all-load-pa
	if !exists("g:ruby_path")
					" we have some trouble with windows/gvim, so we do nothing for now
					if !exists("g:dotvim")
									if executable("ruby") " only unix
													let l:code = "print ($: + begin; require %q{rubygems}; Gem::Specification.map(&:lib_dirs_glob).sort.uniq;  rescue LoadError; []; end).join(%q{,})" 
													let g:ruby_path = system("ruby -e '" . l:code . "'")
									else
													let g:ruby_path = getcwd."**"
									endif
					endif
	endif
endfunction
call s:FixRubyPath() " first fix the ruby path THEN call customizations
"}}}

function! CVsourceLocalVim() " {{{
	" load all available local*.vim files here
	" you can easily apply non standard formatting rules this way
	for l:file in split(glob("local*.vim"),"\n")
		if filereadable(l:file)
			exec ":source " . l:file
		endif
	endfor
endfunction
call CVsourceLocalVim()
"}}}

" vim: fdm=marker : ts=2 :

